<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/home.css">
    <title>Login</title>
</head>

<body>
    <nav class="nav">
        <div class="logo">PORTAL</div>
        <ul class="links">
            <li><a href="/" class="links">Home</a></li>
            
            <li><a href="/auth/login" class="links">Login</a></li>
        </ul>
    </nav>
<div class="loginOuter">
    <div class="login">
        <div class="logonLogo">Home</div>
        <div class="form">
            <h1>Package Descriptions</h1>

    <ul>
        <li>
            <h2>body-parser</h2>
            <p>Parse incoming request bodies in middleware before your handlers, available under the req.body property.</p>
        </li>

        <li>
            <h2>connect-flash</h2>
            <p>Allows for the storage of temporary messages in session and their removal after being displayed to the user.</p>
        </li>

        <li>
            <h2>connect-mongodb-session</h2>
            <p>Store your session data in MongoDB, providing a scalable and persistent session management solution.</p>
        </li>

        <li>
            <h2>dotenv</h2>
            <p>Loads environment variables from a .env file into process.env, making it easy to configure your Node.js application.</p>
        </li>

        <li>
            <h2>ejs</h2>
            <p>Embedded JavaScript templates for dynamic content generation in HTML, useful for building dynamic web pages.</p>
        </li>

        <li>
            <h2>express</h2>
            <p>Fast, unopinionated, minimalist web framework for Node.js. Great for building robust web applications and APIs.</p>
        </li>

        <li>
            <h2>express-session</h2>
            <p>Middleware for managing user sessions in Express applications, making it easy to handle user authentication and state.</p>
        </li>

        <li>
            <h2>http-errors</h2>
            <p>Generate HTTP error objects with common HTTP status codes, providing a convenient way to handle errors in your app.</p>
        </li>

        <li>
            <h2>mongoose</h2>
            <p>MongoDB object modeling tool designed to work in an asynchronous environment. Useful for interacting with MongoDB databases.</p>
        </li>

        <li>
            <h2>morgan</h2>
            <p>HTTP request logger middleware for Node.js. Automatically logs HTTP requests, providing valuable debugging information.</p>
        </li>

        <li>
            <h2>multer</h2>
            <p>Middleware for handling multipart/form-data, commonly used for file uploads in Express applications.</p>
        </li>
    </ul>
        </div>
    </div>
</div>



</body>

</html>